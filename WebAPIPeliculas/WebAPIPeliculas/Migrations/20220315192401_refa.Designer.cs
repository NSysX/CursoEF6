// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using WebAPIPeliculas.Contexts;

#nullable disable

namespace WebAPIPeliculas.Migrations
{
    [DbContext(typeof(PeliculasDbContext))]
    [Migration("20220315192401_refa")]
    partial class refa
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebAPIPeliculas.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Biografia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasComment("Nombre del Actor");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nombre" }, "Ix_NoDuplicadoNombre")
                        .IsUnique();

                    b.ToTable("Actor", (string)null);

                    b.HasComment("Actores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biografia = "Thomas Stanley Holland (Kingston upon Thames, Londres; 1 de junio de 1996), conocido simplemente como Tom Holland, es un actor, actor de voz y bailarín británico.",
                            FechaNacimiento = new DateTime(1996, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Tom Holland"
                        },
                        new
                        {
                            Id = 2,
                            Biografia = "Samuel Leroy Jackson (Washington D. C., 21 de diciembre de 1948), conocido como Samuel L. Jackson, es un actor y productor de cine, televisión y teatro estadounidense. Ha sido candidato al premio Óscar, a los Globos de Oro y al Premio del Sindicato de Actores, así como ganador de un BAFTA al mejor actor de reparto.",
                            FechaNacimiento = new DateTime(1948, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Samuel L. Jackson"
                        },
                        new
                        {
                            Id = 3,
                            Biografia = "Robert John Downey Jr. (Nueva York, 4 de abril de 1965) es un actor, actor de voz, productor y cantante estadounidense. Inició su carrera como actor a temprana edad apareciendo en varios filmes dirigidos por su padre, Robert Downey Sr., y en su infancia estudió actuación en varias academias de Nueva York.",
                            FechaNacimiento = new DateTime(1965, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Robert Downey Jr."
                        },
                        new
                        {
                            Id = 4,
                            FechaNacimiento = new DateTime(1981, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Chris Evans"
                        },
                        new
                        {
                            Id = 5,
                            FechaNacimiento = new DateTime(1972, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Dwayne Johnson"
                        },
                        new
                        {
                            Id = 6,
                            FechaNacimiento = new DateTime(2000, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Auli'i Cravalho"
                        },
                        new
                        {
                            Id = 7,
                            FechaNacimiento = new DateTime(1984, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Scarlett Johansson"
                        },
                        new
                        {
                            Id = 8,
                            FechaNacimiento = new DateTime(1964, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Keanu Reeves"
                        });
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.Cine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador consecutivo Unico");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasComment("Nombre del Cine");

                    b.Property<Point>("Ubicacion")
                        .HasColumnType("geography");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nombre" }, "Ix_NoDupNombre")
                        .IsUnique();

                    b.ToTable("Cine", (string)null);

                    b.HasComment("Lista de los datos de los Cines");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Nombre = "Acropolis",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.939248 18.469649)")
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Sambil",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.911582 18.482455)")
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Megacentro",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.856309 18.506662)")
                        },
                        new
                        {
                            Id = 1,
                            Nombre = "Agora Mall",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.9388777 18.4839233)")
                        });
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.CineOferta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("date")
                        .HasComment("Fecha de Fin de la Oferta");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date")
                        .HasComment("Fecha de Inicio de la Oferta");

                    b.Property<decimal>("PorcentajeDescuento")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("CineId")
                        .IsUnique();

                    b.HasIndex(new[] { "CineId", "FechaInicio", "FechaFin" }, "Ix_NoDuplicado")
                        .IsUnique();

                    b.ToTable("CineOferta", (string)null);

                    b.HasComment("Ofertas de descuento del cine");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CineId = 4,
                            FechaFin = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            FechaInicio = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            PorcentajeDescuento = 15m
                        },
                        new
                        {
                            Id = 1,
                            CineId = 1,
                            FechaFin = new DateTime(2022, 3, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            FechaInicio = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            PorcentajeDescuento = 10m
                        });
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasComment("Nombre del Genero de Pelicula");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nombre" }, "IX_NoDuplicadoNombre")
                        .IsUnique();

                    b.ToTable("Genero", (string)null);

                    b.HasComment("Generos de Peliculas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Acción"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Animación"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Comedia"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Ciencia ficción"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Drama"
                        });
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.Pelicula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("EnCartelera")
                        .HasColumnType("bit")
                        .HasComment("Si esta en Cartelera");

                    b.Property<DateTime?>("FechaEstreno")
                        .HasColumnType("date")
                        .HasComment("Fecha de Estreno");

                    b.Property<string>("PosterURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasComment("Imagen del poster de la Pelicula");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasComment("Titulo de la Pelicula");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Titulo" }, "IX_NoDupTitulo")
                        .IsUnique();

                    b.ToTable("Pelicula", (string)null);

                    b.HasComment("Listado de Peliculas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnCartelera = false,
                            FechaEstreno = new DateTime(2012, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/8/8a/The_Avengers_%282012_film%29_poster.jpg",
                            Titulo = "Avengers"
                        },
                        new
                        {
                            Id = 2,
                            EnCartelera = false,
                            FechaEstreno = new DateTime(2017, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/9/98/Coco_%282017_film%29_poster.jpg",
                            Titulo = "Coco"
                        },
                        new
                        {
                            Id = 3,
                            EnCartelera = false,
                            FechaEstreno = new DateTime(2021, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/0/00/Spider-Man_No_Way_Home_poster.jpg",
                            Titulo = "Spider-Man: No way home"
                        },
                        new
                        {
                            Id = 4,
                            EnCartelera = false,
                            FechaEstreno = new DateTime(2019, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/0/00/Spider-Man_No_Way_Home_poster.jpg",
                            Titulo = "Spider-Man: Far From Home"
                        },
                        new
                        {
                            Id = 5,
                            EnCartelera = true,
                            FechaEstreno = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/5/50/The_Matrix_Resurrections.jpg",
                            Titulo = "The Matrix Resurrections"
                        });
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.PeliculaActor", b =>
                {
                    b.Property<int>("IdPelicula")
                        .HasColumnType("int")
                        .HasComment("Id consecutivo de la tabla de peliculas");

                    b.Property<int>("IdActor")
                        .HasColumnType("int")
                        .HasComment("Id consecutivo de la tabla de actores");

                    b.Property<int>("Orden")
                        .HasColumnType("int")
                        .HasComment("Orden de importancia en la pelicula");

                    b.Property<string>("Personaje")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Nombre del personaje del actor");

                    b.HasKey("IdPelicula", "IdActor");

                    b.HasIndex(new[] { "IdActor", "IdPelicula" }, "Ix_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("Ix_NoDuplicado1");

                    b.ToTable("PeliculaActor", (string)null);

                    b.HasComment("Relacion de actores y peliculas");

                    b.HasData(
                        new
                        {
                            IdPelicula = 4,
                            IdActor = 2,
                            Orden = 2,
                            Personaje = "Samuel L. Jackson"
                        },
                        new
                        {
                            IdPelicula = 4,
                            IdActor = 1,
                            Orden = 1,
                            Personaje = "Peter Parker"
                        },
                        new
                        {
                            IdPelicula = 3,
                            IdActor = 1,
                            Orden = 1,
                            Personaje = "Peter Parker"
                        },
                        new
                        {
                            IdPelicula = 1,
                            IdActor = 3,
                            Orden = 2,
                            Personaje = "Iron Man"
                        },
                        new
                        {
                            IdPelicula = 1,
                            IdActor = 7,
                            Orden = 3,
                            Personaje = "Black Widow"
                        },
                        new
                        {
                            IdPelicula = 1,
                            IdActor = 4,
                            Orden = 1,
                            Personaje = "Capitán América"
                        },
                        new
                        {
                            IdPelicula = 5,
                            IdActor = 8,
                            Orden = 1,
                            Personaje = "Neo"
                        });
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.PeliculaGenero", b =>
                {
                    b.Property<int>("IdPelicula")
                        .HasColumnType("int")
                        .HasComment("El Id consecutivo de la tabla de Pelicula");

                    b.Property<int>("IdGenero")
                        .HasColumnType("int")
                        .HasComment("El Id consecutivo de la tabla de generos");

                    b.HasKey("IdPelicula", "IdGenero");

                    b.HasIndex("IdGenero");

                    b.HasIndex(new[] { "IdPelicula", "IdGenero" }, "Ix_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("Ix_NoDuplicado2");

                    b.ToTable("PeliculaGenero", (string)null);

                    b.HasComment("Relacion de muchos a muchos entre genero y pelicula");

                    b.HasData(
                        new
                        {
                            IdPelicula = 1,
                            IdGenero = 1
                        },
                        new
                        {
                            IdPelicula = 1,
                            IdGenero = 4
                        },
                        new
                        {
                            IdPelicula = 3,
                            IdGenero = 4
                        },
                        new
                        {
                            IdPelicula = 3,
                            IdGenero = 1
                        },
                        new
                        {
                            IdPelicula = 3,
                            IdGenero = 3
                        },
                        new
                        {
                            IdPelicula = 4,
                            IdGenero = 4
                        },
                        new
                        {
                            IdPelicula = 4,
                            IdGenero = 1
                        },
                        new
                        {
                            IdPelicula = 4,
                            IdGenero = 3
                        },
                        new
                        {
                            IdPelicula = 2,
                            IdGenero = 2
                        },
                        new
                        {
                            IdPelicula = 5,
                            IdGenero = 4
                        },
                        new
                        {
                            IdPelicula = 5,
                            IdGenero = 1
                        },
                        new
                        {
                            IdPelicula = 5,
                            IdGenero = 5
                        });
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.PeliculaSalaCine", b =>
                {
                    b.Property<int>("IdPelicula")
                        .HasColumnType("int")
                        .HasComment("El id de la tabla de Pelicula");

                    b.Property<int>("IdSalaCine")
                        .HasColumnType("int")
                        .HasComment("El id de la tabla de Sala de Cine");

                    b.HasKey("IdPelicula", "IdSalaCine");

                    b.HasIndex("IdSalaCine");

                    b.HasIndex(new[] { "IdPelicula", "IdSalaCine" }, "Ix_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("Ix_NoDuplicado3");

                    b.ToTable("PeliculaSalaCine", (string)null);

                    b.HasComment("Relacion de las peliculas en las salas de cine");

                    b.HasData(
                        new
                        {
                            IdPelicula = 5,
                            IdSalaCine = 3
                        },
                        new
                        {
                            IdPelicula = 5,
                            IdSalaCine = 4
                        },
                        new
                        {
                            IdPelicula = 5,
                            IdSalaCine = 1
                        },
                        new
                        {
                            IdPelicula = 5,
                            IdSalaCine = 2
                        },
                        new
                        {
                            IdPelicula = 5,
                            IdSalaCine = 5
                        },
                        new
                        {
                            IdPelicula = 5,
                            IdSalaCine = 6
                        },
                        new
                        {
                            IdPelicula = 5,
                            IdSalaCine = 7
                        });
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.Refaccionaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("Nombre de la Refaccionaria");

                    b.Property<Point>("Ubicacion")
                        .HasColumnType("geography")
                        .HasComment("La Ubicacion de la Refaccionaria (Longitud y Latitud)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nombre" }, "Ix_NoDupNombreRefa")
                        .IsUnique();

                    b.ToTable("Refaccionaria", (string)null);

                    b.HasComment("Lista de todas las Refaccionarias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Auto Partes LALO I",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-97.830609 25.666709)")
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Auto Partes LALO II",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-97.80884 25.672184)")
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Auto Partes LALO III",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-97.806409 25.666665)")
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Auto Partes LALO IV",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-97.815993 25.661466)")
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Auto Partes LALO V",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-97.513383 25.823908)")
                        });
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.SalaCine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CineId")
                        .HasColumnType("int")
                        .HasComment("el Id del cine al que pertenece la sala");

                    b.Property<decimal>("Precio")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Precio de la entrada a la Sala de Cine");

                    b.Property<int>("TipoSalaCine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("Tipo de sala de cine");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CineId", "Precio" }, "Ix_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("Ix_NoDuplicado4");

                    b.ToTable("SalaCine", (string)null);

                    b.HasComment("Salas de Cine");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            CineId = 3,
                            Precio = 250m,
                            TipoSalaCine = 1
                        },
                        new
                        {
                            Id = 6,
                            CineId = 3,
                            Precio = 330m,
                            TipoSalaCine = 2
                        },
                        new
                        {
                            Id = 7,
                            CineId = 3,
                            Precio = 450m,
                            TipoSalaCine = 3
                        },
                        new
                        {
                            Id = 8,
                            CineId = 4,
                            Precio = 250m,
                            TipoSalaCine = 1
                        },
                        new
                        {
                            Id = 1,
                            CineId = 1,
                            Precio = 220m,
                            TipoSalaCine = 1
                        },
                        new
                        {
                            Id = 2,
                            CineId = 1,
                            Precio = 320m,
                            TipoSalaCine = 2
                        },
                        new
                        {
                            Id = 3,
                            CineId = 2,
                            Precio = 200m,
                            TipoSalaCine = 1
                        },
                        new
                        {
                            Id = 4,
                            CineId = 2,
                            Precio = 290m,
                            TipoSalaCine = 2
                        });
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.CineOferta", b =>
                {
                    b.HasOne("WebAPIPeliculas.Entities.Cine", null)
                        .WithOne("CineOferta")
                        .HasForeignKey("WebAPIPeliculas.Entities.CineOferta", "CineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.PeliculaActor", b =>
                {
                    b.HasOne("WebAPIPeliculas.Entities.Actor", "Actor")
                        .WithMany("Peliculas")
                        .HasForeignKey("IdActor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_PeliculaActor_Actor");

                    b.HasOne("WebAPIPeliculas.Entities.Pelicula", "Pelicula")
                        .WithMany("Actores")
                        .HasForeignKey("IdPelicula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_PeliculaActor_Pelicula");

                    b.Navigation("Actor");

                    b.Navigation("Pelicula");
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.PeliculaGenero", b =>
                {
                    b.HasOne("WebAPIPeliculas.Entities.Genero", "Genero")
                        .WithMany("PeliculaGenero")
                        .HasForeignKey("IdGenero")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_PeliculaGenero_Genero");

                    b.HasOne("WebAPIPeliculas.Entities.Pelicula", "Pelicula")
                        .WithMany("PeliculaGenero")
                        .HasForeignKey("IdPelicula")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_PeliculaGenero_Pelicula");

                    b.Navigation("Genero");

                    b.Navigation("Pelicula");
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.PeliculaSalaCine", b =>
                {
                    b.HasOne("WebAPIPeliculas.Entities.Pelicula", "Pelicula")
                        .WithMany("PeliculaSalaCines")
                        .HasForeignKey("IdPelicula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_PeliculaSalaCine_Pelicula");

                    b.HasOne("WebAPIPeliculas.Entities.SalaCine", "SalaCine")
                        .WithMany("PeliculaSalaCines")
                        .HasForeignKey("IdSalaCine")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_PeliculaSalaCine_SalaCine");

                    b.Navigation("Pelicula");

                    b.Navigation("SalaCine");
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.SalaCine", b =>
                {
                    b.HasOne("WebAPIPeliculas.Entities.Cine", "Cine")
                        .WithMany("SalasCine")
                        .HasForeignKey("CineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_SalaCine_Cine");

                    b.Navigation("Cine");
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.Actor", b =>
                {
                    b.Navigation("Peliculas");
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.Cine", b =>
                {
                    b.Navigation("CineOferta");

                    b.Navigation("SalasCine");
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.Genero", b =>
                {
                    b.Navigation("PeliculaGenero");
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.Pelicula", b =>
                {
                    b.Navigation("Actores");

                    b.Navigation("PeliculaGenero");

                    b.Navigation("PeliculaSalaCines");
                });

            modelBuilder.Entity("WebAPIPeliculas.Entities.SalaCine", b =>
                {
                    b.Navigation("PeliculaSalaCines");
                });
#pragma warning restore 612, 618
        }
    }
}
